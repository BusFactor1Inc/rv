{"version":3,"sources":["dispatchers.js","actions.js","LoadButton.js","NameField.js","StartButton.js","NextButton.js","NavigationButtons.js","Subreddit.js","Post.js","Posts.js","App.js","serviceWorker.js","reducers.js","store.js","index.js"],"names":["refresher","isLoadingAction","isLoading","type","hasErroredAction","hasErrored","postsAction","posts","nameAction","name","beforeAction","before","afterAction","after","newPostsAction","newPosts","viewAction","view","loadDataDispatcher","arguments","length","undefined","dispatch","console","log","viewSelector","document","getElementById","value","fetch","then","response","ok","Error","statusText","json","postData","data","children","clearInterval","setInterval","lastAfter","url","catch","e","refreshDataDispatcher","LoadButton","selector","this","props","loadData","react_default","a","createElement","id","onClick","bind","Component","connect","state","NameField","key","click","placeholder","onKeyDown","StartButton","count","NextButton","NavigationButtons","src_StartButton","src_NextButton","Subreddit","subredditName","className","href","target","rel","src_NavigationButtons","PostInfo","author","UNIX_timestamp","Date","year","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","timeConverter","time","comments","PostLink","thumbnail","startsWith","src","width","alt","title","Post","permalink","Post_PostLink","Post_PostInfo","created_utc","Posts","map","post","i","src_Post","Selector","TopBar","src_NameField","src_LoadButton","App_Selector","App","App_TopBar","src_Subreddit","src_Posts","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.815f1568.chunk.js","sourcesContent":["import { isLoadingAction,\n\t hasErroredAction,\n\t postsAction,\n\t nameAction,\n\t afterAction,\n\t beforeAction,\n\t newPostsAction,\n\t viewAction } from './actions';\n\nlet refresher;\n\nexport function loadDataDispatcher (name = \"news\", view = \"New\", after) {\n    return (dispatch) => {\n\tconsole.log('Fetching posts: ' + name, view, after);\n\tdispatch(viewAction(view));\n\tdispatch(afterAction(null));\n\tdispatch(isLoadingAction(true));\n\tdispatch(hasErroredAction(false));\n\tdispatch(newPostsAction(false));\n\n\tlet viewSelector = document.getElementById('view');\n\tif(view) {\n\t    // Set the view Selector\n\t    viewSelector.value = view;\n\t    \n\t} else {\n\t    let view = viewSelector.value;\n\t    dispatch(viewAction(view));\n\t}\n\n\tlet url = \"/subreddit?name=\" + name +\n\t    (view ? (\"&view=\" + view) : \"\") +\n\t    (after ? (\"&after=\" + after) : \"\");\n\n\tfetch(url)\n\t    .then((response) => {\n\t\tif(!response.ok) {\n\t\t    throw new Error(response.statusText);\n\t\t}\n\n\t\tdispatch(isLoadingAction(false));\n\n\t\treturn response;\n\t    })\n\t    .then((response) => response.json())\n\t    .then((postData) => {\n\t\tconsole.log(\"Data action\", postData.data);\n\t\tdispatch(nameAction(name));\n\t\tdispatch(viewAction(view));\n\t\tdispatch(afterAction(postData.data.after));\n\t\tdispatch(postsAction(postData.data.children));\n\n\t\tif(refresher) {\n\t\t    clearInterval(refresher);\n\t\t}\n\n\t\trefresher = setInterval(() => {\n\t\t    refreshDataDispatcher(name, view, after)(dispatch);\n\t\t}, 60*1000);\n\n\n\t    })\n\t    .catch((e) => {\n\t\tconsole.log('Loding Error:' + e);\n\t\tdispatch(hasErroredAction(true));\n\n\t\tdispatch(afterAction(null));\n\t\tdispatch(beforeAction(null));\n\t\tdispatch(postsAction([]));\n\n\t    })\n    }\n}\n\nexport function refreshDataDispatcher (name, view = \"New\", lastAfter) {\n    return (dispatch) => {\n\tconsole.log('Refreshing posts: ' + name, view, lastAfter);\n\n\tlet url = \"/subreddit?name=\" + name +\n\t    (view ? \"&view=\" + view : \"\") +\n\t    (lastAfter ? \"&before=\" + lastAfter : \"\") +\n\t    \"&limit=1\";\n\n\tfetch(url)\n\t    .then((response) => {\n\t\tif(!response.ok) {\n\t\t    throw new Error(response.statusText);\n\t\t}\n\n\t\treturn response;\n\t    })\n\t    .then((response) => response.json())\n\t    .then((postData) => {\n\t\tconsole.log(\"Data action\", postData.data);\n\t\tif(postData.data.after !== lastAfter) {\n\t\t    dispatch(newPostsAction(true));\n\t\t}\n\t    })\n\t    .catch((e) => {\n\t\tconsole.log('Loding Error:' + e);\n\t\tdispatch(hasErroredAction(true));\n\t    })\n    }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// Actions\nexport const isLoadingAction = (isLoading) => ({\n    type: 'IS_LOADING',\n    isLoading\n})\n\nexport const hasErroredAction = (hasErrored) => ({\n    type: 'HAS_ERRORED',\n    hasErrored\n})\n\nexport const postsAction = (posts) => ({\n    type: 'POSTS',\n    posts\n})\n\nexport const nameAction = (name) => ({\n    type: 'NAME',\n    name\n})\n\nexport const beforeAction = (before) => ({\n    type: 'BEFORE',\n    before\n})\n\nexport const afterAction = (after) => ({\n    type: 'AFTER',\n    after\n})\n\nexport const newPostsAction = (newPosts) => ({\n    type: 'NEW_POSTS',\n    newPosts\n})\n\nexport const viewAction = (view) => ({\n    type: 'VIEW',\n    view\n})\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { loadDataDispatcher } from './dispatchers';\n\nclass LoadButton extends Component {\n    onClick () {\n\tlet name = document.getElementById('name');\n\tlet selector = document.getElementById('view');\n\tthis.props.loadData(name.value, selector.value);\n    }\n    render () {\n\treturn (\n\t\t<input id=\"LoadButton\" type=\"button\" value=\"Load\" \n\t               onClick={this.onClick.bind(this)} />\n\t)}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\tloadData: (name, view, after) => {\n\t    dispatch(loadDataDispatcher(name, view, after))\n\t}\n    }\n}\n\nexport default connect((state) => { return {} }, mapDispatchToProps)(LoadButton)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass NameField extends Component {\n    onKeyDown (e) {\n\tif(e.key === 'Enter') {\n\t    let loadButton = document.getElementById('LoadButton');\n\t    loadButton.click();\n\t}\n    }\n    \n    render () {\n\treturn (\n\t\t<input \n\t    id=\"name\" \n\t    type=\"text\" \n\t    placeholder={this.props.name}\n\t    onKeyDown={this.onKeyDown.bind(this)}\n\t\t/>\n\t)}\n}\n\nconst mapStateToProps = (state) => {\n    return {\n\tname: state.name\n    };\n}\n\nexport default connect(mapStateToProps)(NameField);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { loadDataDispatcher } from './dispatchers';\n\nclass StartButton extends Component {\n    onClick () {\n\tconsole.log('after', this.props.after);\n\tthis.props.loadData(this.props.name, this.props.view);\n    }\n\n    render () {\n\treturn (\n\t\t<input \n\t    type=\"button\" \n\t    value={\"Reload\" + (this.props.newPosts ? \"(New Posts)\" : \"\")}\n\t    onClick={this.onClick.bind(this)}\n\t\t/>\n\t);\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n\tname: state.name,\n\tafter: state.after,\n\tview: state.view,\n\tnewPosts: state.newPosts\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\tloadData: (name, after, count) => {\n\t    dispatch(loadDataDispatcher(name, after, count))\n\t}\n    }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartButton);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { loadDataDispatcher } from './dispatchers';\n\nclass NextButton extends Component {\n    onClick () {\n\tconsole.log('after', this.props.after);\n\tthis.props.loadData(this.props.name,\n\t\t\t    this.props.view,\n\t\t\t    this.props.after);\n    }\n\n    render () {\n\treturn (\n\t\t<input \n\t    type=\"button\" \n\t    value=\"Next 25 posts\"\n\t    onClick={this.onClick.bind(this)}\n\t\t/>\n\t);\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n\tname: state.name,\n\tafter: state.after,\n\tview: state.view,\n\tnewPosts: state.newPosts\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\tloadData: (name, after, count) => {\n\t    dispatch(loadDataDispatcher(name, after, count))\n\t}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NextButton);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport StartButton from './StartButton';\nimport NextButton from './NextButton';\n\nclass NavigationButtons extends Component {\n    render () {\n\treturn (\n\t\t<span>\n\t\t<StartButton /> &nbsp;\n\t\t<NextButton />\n\t\t</span>\n\t);\n    }\n}\n\nexport default NavigationButtons;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport NavigationButtons from './NavigationButtons';\n\nclass Subreddit extends Component {\n    render () {\n\tlet subredditName;\n\n\tif(this.props.name) {\n\t    subredditName = \"/r/\" + this.props.name;\n\t}\n\n\n\tif(!this.props.hasErrored && this.props.posts.length > 0) {\n\t    return (\n\t\t    <div className=\"Subreddit\">\n\t\t    <span>{this.props.view}</span> &nbsp;\n\t\t    <a href={\"https://reddit.com\" + subredditName}\n\t\t       target=\"_blank\" rel=\"noopener noreferrer\"\n\t\t    >\n\t\t    {subredditName}\n    \t        </a> &nbsp;\n\t\t    <NavigationButtons />\n\t\t    <hr />\n\t\t    </div>\n\t);\n\t} else {\n\t    return <span />;\n\t}\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n\tposts: state.posts,\n\tname: state.name,\n\tview: state.view,\n\thasErrored: state.hasErrored\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Subreddit);\n","import React, { Component } from 'react';\n\n// From: https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\nfunction timeConverter(UNIX_timestamp){\n  var a = new Date(UNIX_timestamp * 1000);\n  var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n  var year = a.getFullYear();\n  var month = months[a.getMonth()];\n  var date = a.getDate();\n  var hour = a.getHours();\n  var min = a.getMinutes();\n  var sec = a.getSeconds();\n  var time = month + ' ' + date + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n  return time;\n}\n\nclass PostInfo extends  Component {\n    render () {\n\treturn <div className=\"PostInfo\">\n\t    <span>Author: {this.props.author}</span> &nbsp;\n\t    <span>Date: {timeConverter(this.props.time)}</span> &nbsp;\n\t    <a href={\"https://reddit.com/\" + this.props.comments}\n\t       target=\"_blank\" rel=\"noopener noreferrer\">Comments</a>\n\t    </div>\n    }\n}\n\nclass PostLink extends Component {\n    render () {\n\tlet thumbnail;\n\n\tif(this.props.thumbnail.startsWith('http')) {\n\t    thumbnail = \n\t\t<a href={this.props.url} \n\t           target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t<img className=\"Thumbnail\" \n\t    src={this.props.thumbnail}\n\t    width='42px' \n\t    alt=\"Thumbnail\" \n\t    />\n\t\t</a>\n\t}\t\t\n\n\treturn <div className=\"PostLink\">\n\t    {thumbnail}\n\t    <a href={this.props.url}\n\t       target=\"_blank\" rel=\"noopener noreferrer\">{this.props.title}</a>\n\t    </div>\n    }\t    \n}\n\nclass Post extends Component {\n    render () {\n\t//console.log(this.props.data);\n\tlet data = this.props.data || {\n\t    id: 0,\n\t    title: \"Unknown\",\n\t    url: \"http://\",\n\t    thumbnail: \"\",\n\t    author: \"Unknown\",\n\t    permalink: \"http://\",\n\t    time: \"0\"\n\t}\n\n\treturn (\n\t\t<div key={data.id} \n\t             className=\"Post\">\n\t\t<PostLink\n\t    title={data.title}\n\t    url={data.url}\n\t    thumbnail={data.thumbnail}\n\t    />\n\t\t<PostInfo \n\t    author={data.author} \n\t    comments={data.permalink} \n\t    time={data.created_utc}\n\t    />\n\t\t</div>\n\t);\n\t}\n}\n\nexport default Post;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Post from './Post';\n\nclass Posts extends Component {\n    render () {\n\tif(this.props.isLoading) {\n\t    return <span>Loading...</span>;\n\t}\n\n\tif(this.props.hasErrored) {\n\t    return <span>Loading error; likely the Subreddit does not exist.</span>\n\t}\n\n\tif(this.props.posts.length > 0) {\n\t    return this.props.posts.map((post, i) => (\n\t\t    <Post key={i} data={post.data}/>\n\t    ));\n\t}\n\n\treturn <span>Please enter a Subreddit name above \n\tto view its posts.</span>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n\tposts: state.posts,\n\tisLoading: state.isLoading,\n\thasErrored: state.hasErrored,\n\tname: state.name\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport LoadButton from './LoadButton';\nimport NameField from './NameField';\nimport Subreddit from './Subreddit';\nimport Posts from './Posts';\n\nclass Selector extends Component {\n    render () {\n\treturn ( <select id=\"view\">\n\t\t <option value=\"Top\">Top</option>\n\t\t <option value=\"New\">New</option>\n\t\t <option value=\"Hot\">Hot</option>\n\t\t </select>\n\t       );\n    }\n}\n\nclass TopBar extends Component {\n    render () {\n\treturn (\n\t\t<div className=\"TopBar\">\n\t\tSubReddit Viewer (sv): &nbsp;\n\t\t<NameField /> &nbsp;\n\t\t<LoadButton /> &nbsp;\n\t\t<Selector />\n\t\t</div>\n\t);\n    }\n}\n\nclass App extends Component {\n  render() {\n    return (\n\t    <div className=\"App\">\n\t    <hr />\n\t    <TopBar />\n\t    <hr />\n\t    <center>\n\t    <Subreddit />\n\t    <Posts />\n\t    <hr />\n\t    <Subreddit />\n\t    Burton Samograd - 2019\n\t    </center>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\n////////////////////////////////////////////////////////////////////////////////\n// Reducers\nfunction isLoading(state = false, action) {\n    switch(action.type) {\n    case 'IS_LOADING':\n\treturn action.isLoading;\n    default:\n\treturn state;\n    }\n}\n\nfunction hasErrored(state = false, action) {\n    switch(action.type) {\n    case 'HAS_ERRORED':\n\treturn action.hasErrored;\n    default:\n\treturn state;\n    }\n}\n\nfunction posts(state = [], action) {\n    switch(action.type) {\n    case 'POSTS':\n\treturn action.posts;\n\n    default:\n\treturn state;\n    }\n}\n\nfunction name(state = \"all\", action) {\n    switch(action.type) {\n    case 'NAME':\n\treturn action.name;\n\n    default:\n\treturn state;\n    }\n}\n\nfunction after(state = null, action) {\n    switch(action.type) {\n    case 'AFTER':\n\treturn action.after;\n\n    default:\n\treturn state;\n    }\n}\n\nfunction before(state = null, action) {\n    switch(action.type) {\n    case 'BEFORE':\n\treturn action.before;\n\n    default:\n\treturn state;\n    }\n}\n\nfunction newPosts(state = false, action) {\n    switch(action.type) {\n    case 'NEW_POSTS':\n\treturn action.newPosts;\n\n    default:\n\treturn state;\n    }\n}\n\nfunction view(state=\"new\", action) {\n    switch(action.type) {\n    case 'VIEW':\n\treturn action.view;\n    default:\n\treturn state;\n    }\n}\n\nconst rootReducer = combineReducers({\n    isLoading,\n    hasErrored,\n    posts,\n    name,\n    before,\n    after,\n    newPosts,\n    view\n});\n\nexport default rootReducer;\n","import { createStore, \n\t applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, \n\t\t\t  applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store'\n\nimport { loadDataDispatcher } from './dispatchers';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, \n\t\tdocument.getElementById('root'));\n\nloadDataDispatcher()(store.dispatch);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}